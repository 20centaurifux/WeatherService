@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model WeatherService.Models.View.Dashboard

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Home";

    <style>
        .bg {
            position: fixed;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            background-size: cover;
            background-position: 50% 50%;
            background-image: url('assets/bg-home.jpg');
            background-repeat: repeat;
            z-index: -1;
        }
    </style>

    <template id="widgetFactory" inline-template>
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Select the widget you want to add</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="container">
                        <div class="row">
                            <div class="col-4">
                                <div class="list-group" role="tablist">
                                    <a v-for="widget in this.widgets" class="list-group-item list-group-item-action" data-toggle="list" href="#" @@click="widgetSelected(widget)">{{widget.name}}</a>
                                </div>
                            </div>

                            <div class="col">
                                <div class="tab-content">
                                    <widget-options :widget="selectedWidget" :stations="availableStations" :selection="selectedStations"></widget-options>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <add-widget-button :widget="selectedWidget" :stations="selectedStations"></add-widget-button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </template>

    <template id="widgetOptions" inline-template>
        <div>
            <h4>{{widget.name}}</h4>
            <h5 class="text-info">{{widget.description}}</h5>
            <template v-if="stations == null || stations.length == 0">
                <p class="text-warning">
                    There are no stations available for this widget.
                </p>
            </template>
            <template v-else-if="widget.supportsMultipleStations">
                <p>
                    Please select at least one weather station you want to populate the dashboard from. Multiple stations are allowed.
                </p>

                <select class="custom-select" multiple @@change="updateMultiSelection()">
                    <option v-for="station in stations" :value="station.id">{{station.name}}</option>
                </select>
            </template>
            <template v-else>
                <p>
                    Please select a weather station from the list below.
                </p>

                <div v-for="station in stations" class="form-check">
                    <input class="form-check-input" type="radio" name="station" :data-station-id="station.id" @@click="updateSingleSelection()">
                    <label class="form-check-label">{{station.name}}</label>
                </div>
            </template>
        </div>
    </template>

    <template id="addWidgetButton" inline-template>
        <button v-if="stations.length>0" type="button" class="btn btn-primary" @@click="addWidget()">Add widget</button>
        <button v-else type="button" class="btn btn-primary" disabled>Add widget</button>
    </template>

    <environment names="Development">
        <script src="~/js/home/dashboard.js"></script>
    </environment>
    <environment names="Staging, Test, Production">
        <script src="~/js/home/dashboard.min.js"></script>
    </environment>

    <script type="text/javascript">
    $(document).ready(function()
    {
        var pageApp = null;

        @if(User.Identity.IsAuthenticated)
        {
        <text>
        var dashboard = new Dashboard({ updateUrl: '/Home/UpdateDashboard' });
        </text>
        }
        else
        {
        <text>
        var dashboard = new Dashboard();
        </text>
        }

        dashboard.refresh();

        $('<li class="nav-item">' +
            '    <button type="button" class="btn btn-primary">Add widget</button>' +
            '</li>')
            .appendTo('#action-buttons')
            .click(function()
            {
                $('#widget-factory-dialog').modal('show');
                pageApp.$emit('new-widget-dialog-opened');
            });

        Vue.component('widgetOptions',
        {
            props: ['widget', 'stations', 'selection'],
            template: '#widgetOptions',
            updated: function()
            {
                this.selectStations();
            },
            methods:
            {
                updateSingleSelection()
                {
                    var id = $(this.$el).find('.form-check-input:checked').attr('data-station-id');

                    this.selection.splice(0, this.selection.length, id);
                },
                updateMultiSelection()
                {
                    var self = this;

                    self.selection.splice(0, self.selection.length);

                    $(this.$el).find('option:checked').each(function()
                    {
                        self.selection.push($(this).val());
                    });
                },
                selectStations()
                {
                    var selected = this.selection;

                    if (this.widget.supportsMultipleStations)
                    {
                        $(this.$el).find('option').each(function()
                        {
                            $(this).attr('selected', $.inArray($(this).val(), selected) != -1);
                        });
                    }
                    else
                    {
                        var stationId = selected[0];

                        $(this.$el).find('.form-check-input').prop('checked', false);
                        $(this.$el).find('.form-check-input[data-station-id="' + stationId + '"]').prop('checked', true);
                    }
                }
            }
        });

        Vue.component('addWidgetButton',
        {
            props: ['widget', 'stations'],
            template: '#addWidgetButton',
            methods:
            {
                addWidget()
                {
                    dashboard.addWidget(this.widget, this.stations);
                }
            }
        });

        Vue.component('widgetFactory',
        {
            props:
            {
                widgets: { type: Array },
                stations: { type: Object },
                selectedWidget: { type: Object, default() { return {} } },
                selectedStations: { type: Array, default() { return [] }}
            },
            template: '#widgetFactory',
            created: function()
            {
                var self = this;

                this.$parent.$on('new-widget-dialog-opened', function()
                {
                    self.selectDefault();
                });
            },
            methods:
            {
                widgetSelected(widget)
                {
                    this.selectedWidget = widget;
                    this.selectedStations.splice(0, this.selectedStations.length);

                    var stations = this.stations[widget.guid];

                    if (stations.length > 0)
                    {
                        this.selectedStations.push(stations[0].id);
                    }
                },
                selectDefault()
                {
                    if (this.widgets.length)
                    {
                        this.widgetSelected(this.widgets[0]);

                        $(this.$el).find('.list-group-item-action').removeClass('active');
                        $(this.$el).find('.list-group-item-action:first').addClass('active');
                    }
                }
            },
            computed:
            {
                availableStations()
                {
                    if (this.selectedWidget)
                    {
                        return this.stations[this.selectedWidget.guid];
                    }

                    return [];
                }
            },
            mounted: function()
            {
                this.selectDefault();
            }
        });

        pageApp = new Vue(
        {
            el: '#page',
            data:
            {
                availableWidgets: @Json.Serialize(Model.AvailableWidgets),
                supportedStations: @Json.Serialize(Model.SupportedStations)
            }
        });
    });
    </script>

    <div id="page">
        <div id="widget-factory-dialog" class="modal" tabindex="-1" role="dialog">
            <widget-factory :widgets="availableWidgets" :stations="supportedStations"></widget-factory>
        </div>
    </div>

    <div class="gridster">
        <ul>
            @foreach (var item in Model.Items)
            {
                <li style="background-color:@item.Widget.Background;" data-widget-stations="@String.Join(",", item.Stations)" data-widget-guid="@item.Widget.Guid" data-widget-url="@item.Widget.Url" data-widget-last-sync="0" data-sizex="@item.Widget.Width" data-sizey="@item.Widget.Height" data-col="@item.X" data-row="@item.Y">
                </li>
            }
        </ul>
    </div>

    <div id="bg" class="bg"></div>
}